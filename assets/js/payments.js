// Generated by CoffeeScript 1.9.3
var Payments, payments;

Payments = (function() {
  function Payments(options) {
    var me;
    if (options == null) {
      options = {};
    }
    me = this;
    this.options = options;
    me._eventsBinding();
  }

  Payments.prototype._eventsBinding = function() {
    $(".payment_form .form-control").bind("keyup", function(e) {
      if ($(this).hasClass("error")) {
        return $(this).removeClass("error");
      }
    });
    $("#cc_expire").inputmask("99/9999");
    $("#cc_ccv").inputmask({
      mask: '9',
      repeat: 3,
      greedy: false
    });
    return $("#cc_number").inputmask({
      mask: '9',
      repeat: 16,
      greedy: false
    });
  };

  Payments._activateLoader = function() {
    $("#sbm_button").addClass('disabled');
    $("#sbm_button").prop('disabled', true);
    return $(".payment_process_loader").addClass("active");
  };

  Payments._deactivateLoader = function() {
    $("#sbm_button").removeClass('disabled');
    $("#sbm_button").prop('disabled', false);
    return $(".payment_process_loader").removeClass("active");
  };

  Payments._validateCreditCardData = function(cc_data) {
    var card_type, is_cvv_valid, is_valid_cardnumber, is_valid_expire, mid_error, parse_cc_expire, v_errors, v_results;
    v_errors = [];
    card_type = '';
    is_valid_cardnumber = $.payform.validateCardNumber(cc_data.number);
    if (is_valid_cardnumber) {
      card_type = $.payform.parseCardType(cc_data.number);
    } else {
      mid_error = {
        id: "cc_number",
        type: "card_number",
        msg: "Invalid credit card number"
      };
      v_errors.push(mid_error);
    }
    is_cvv_valid = $.payform.validateCardCVC(cc_data.ccv, card_type);
    if (!is_cvv_valid) {
      mid_error = {
        id: "cc_ccv",
        type: "cvv",
        msg: "Invalid CCV"
      };
      v_errors.push(mid_error);
    }
    is_valid_expire = false;
    parse_cc_expire = $.payform.parseCardExpiry(cc_data.expire);
    if (!_.isEmpty(parse_cc_expire)) {
      is_valid_expire = $.payform.validateCardExpiry(parse_cc_expire.month, parse_cc_expire.year);
    }
    if (!is_valid_expire) {
      mid_error = {
        id: "cc_expire",
        type: "expire",
        msg: "Invalid expiration date"
      };
      v_errors.push(mid_error);
    }
    return v_results = {
      card_type: card_type,
      v_errors: v_errors
    };
  };

  Payments._responsePaymentHandler = function(response_data) {
    this._deactivateLoader();
    if (response_data.status) {
      toastr.success("" + response_data.msg);
      if (!response_data.mongo_status) {
        return toastr.error("" + response_data.mongo_msg);
      } else {
        return toastr.success("" + response_data.mongo_msg);
      }
    } else {
      return toastr.error("" + response_data.msg);
    }
  };

  Payments._requestPaypalPayment = function(send_data) {
    var me, request_call;
    this._activateLoader();
    me = this;
    request_call = $.post("/payment_gateway_paypal", send_data, 'json');
    return request_call.done(function(response_data) {
      return me._responsePaymentHandler(response_data);
    });
  };

  Payments._requestBraintreePayment = function(cc_data) {
    var card, me, request_call;
    me = this;
    card = {
      number: cc_data.number,
      expirationDate: cc_data.expire,
      cvv: cc_data.ccv
    };
    this._activateLoader();
    request_call = $.get("/braintree_client_token", 'json');
    return request_call.done(function(client_token) {
      var client;
      client = new braintree.api.Client({
        clientToken: client_token
      });
      return client.tokenizeCard(card, function(error, nonce) {
        var send_data;
        if (!error) {
          send_data = {
            amount: cc_data.amount,
            nonce: nonce
          };
          request_call = $.post("/payment_gateway_braintree", send_data, 'json');
          return request_call.done(function(response_data) {
            return me._responsePaymentHandler(response_data);
          });
        } else {
          return toastr.error("" + error);
        }
      });
    });
  };

  Payments._submitPaymentForm = function() {
    var cc_data, error_messages, i, len, me, ref, send_data, v_error, validate_res;
    me = this;
    cc_data = {
      amount: $.trim($("#cc_amount").val()),
      curr: $("#cc_curr > option:selected").val(),
      fullname: $.trim($("#cc_fullname").val()),
      holder_name: $.trim($("#cc_holder_name").val()),
      number: $.trim($("#cc_number").val()),
      expire: $.trim($("#cc_expire").val()),
      ccv: $.trim($("#cc_ccv").val())
    };
    validate_res = this._validateCreditCardData(cc_data);
    if (validate_res.v_errors.length > 0) {
      error_messages = "";
      ref = validate_res.v_errors;
      for (i = 0, len = ref.length; i < len; i++) {
        v_error = ref[i];
        $("#" + v_error.id).addClass('error');
        error_messages += "<p>" + v_error.msg + "</p>";
      }
      toastr.error(error_messages);
    } else {
      $(".cc_card_type").html("<span class='label label-success'>" + validate_res.card_type + "</span>");
      $(".cc_card_type").addClass('active');
      if (validate_res.card_type) {
        if (validate_res.card_type === 'amex' && cc_data.curr !== 'USD') {
          toastr.error("AMEX is possible to use only for USD");
        } else {
          if (cc_data.curr === 'USD' || cc_data.curr === 'EUR' || cc_data.curr === 'AUD') {
            send_data = {
              card_type: validate_res.card_type,
              cc_data: cc_data
            };
            this._requestPaypalPayment(send_data);
          } else {
            this._requestBraintreePayment(cc_data);
          }
        }
      } else {
        toastr.error("Card type is not detected");
      }
    }
    return false;
  };

  return Payments;

})();

payments = new Payments;
